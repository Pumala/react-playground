{"version":3,"sources":["components/LeftSideNav/LeftSideNav.js","components/Home/Home.js","components/ColorBrowserApp/ColorSlider/ColorSlider.js","components/ColorBrowserApp/ColorSliders/ColorSliders.js","components/ColorBrowserApp/ColorValueDisplayer/ColorValueDisplayer.js","components/ColorBrowserApp/RGBDisplayer/RGBDisplayer.js","components/ColorBrowserApp/ColorBrowser/ColorBrowser.js","components/CookingTimersApp/Timer/Timer.js","components/CookingTimersApp/Timers/Timers.js","components/CookingTimersApp/CookingTimers/CookingTimers.js","components/ToDoApp/Todo/Todo.js","components/ToDoApp/Todos/Todos.js","components/ToDoApp/AddFunctionality/AddFunctionality.js","components/ToDoApp/ToDoList/ToDoList.js","components/NotFound/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["LeftSideNav","_ref","toggleMenu","react_default","a","createElement","className","react_router_dom","to","Home","ColorSlider","color","updateColorValue","name","colorLetter","value","slice","toUpperCase","type","onChange","e","min","max","ColorSliders","colors","map","idx","ColorBrowserApp_ColorSlider_ColorSlider","key","ColorValueDisplayer","Container","styled","div","_templateObject","Box","_templateObject2","props","redVal","greenVal","blueVal","Text","p","_templateObject3","RGBDisplayer","ColorBrowserApp_ColorValueDisplayer_ColorValueDisplayer","ColorBrowser","_useState","useState","_useState2","Object","slicedToArray","setColorValues","ColorBrowserApp_ColorSliders_ColorSliders","persist","colorName","target","newValue","parseInt","colorValues","objectSpread","ColorBrowserApp_RGBDisplayer_RGBDisplayer","Timer","timer","startTimer","pauseTimer","resetTimer","increaseTime","decreaseTime","updateTimerName","id","sec","mode","intervalFuncName","updatedName","editNameMode","timerName","setTimerName","onClick","editNameChangeHandler","onKeyUp","keyCode","submitNameChange","maxlength","disabled","Timers","_ref$timers","timers","length","CookingTimersApp_Timer_Timer","CookingTimersPage","initialState","uuid","originalMin","originalSec","setTimers","clearTimer","clearInterval","cookingTimers","concat","toConsumableArray","CookingTimersApp_Timers_Timers","setIntervalId","setInterval","_ref3","_ref2","timerId","Todo","todo","updateTodo","deleteTodo","updatedTodo","setUpdatedTodo","isEditMode","editedName","editedTodo","onTodoChangeHandler","saveUpdatedTodo","Todos","todos","ToDoApp_Todo_Todo","AddFunctionality","toBeCreatedTodo","addTodo","toBeCreatedTodoChangesHandler","minLength","maxLength","ToDoList","initialTodoState","editMode","setToBeCreatedTodo","_useState3","_useState4","setTodos","ToDoApp_AddFunctionality_AddFunctionality","currentTodos","currentNewTodo","ToDoApp_Todos_Todos","filter","NotFound","MenuToggler","span","App_templateObject","App","setToggleMenu","components_LeftSideNav_LeftSideNav","react_router","exact","path","component","CookingTimers","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6a1e142.chunk.js","sourcesContent":["import React, { useSet } from 'react';\nimport { Link } from 'react-router-dom';\nimport './LeftSideNav.scss';\n\nconst LeftSideNav = ({toggleMenu}) => {\n\n    return (\n        <nav \n            className={\"left-sidebar \" + (toggleMenu ? \"show\" : \"hide\")}>\n            <ul>\n                <li>\n                    <Link\n                        to=\"/\"\n                    >Home</Link>\n                </li>\n                <li>\n                    <Link \n                        to=\"/color-browser\"\n                    >Color Browser</Link>\n                </li>\n                <li>\n                    <Link \n                        to=\"/cooking-timers\"\n                    >Cooking Timers</Link>\n                </li>\n                <li>\n                    <Link \n                        to=\"/to-do-list\"\n                    >To Do List</Link>\n                </li>\n            </ul>\n        </nav>\n    )\n};\n\nexport default LeftSideNav;","import React from 'react';\nimport './Home.scss';\n\nconst Home = () => {\n\n    const title = 'React Playground';\n\n    const subTitle = 'A place where you can roam around and have fun exploring';\n\n    return (\n        <section className=\"home\">\n            <div className=\"content\">\n                <h1>{title}</h1>\n                <p>{subTitle}</p>\n            </div>\n        </section>\n    )\n};\n\nexport default Home;","import React from 'react';\nimport './ColorSlider.scss';\n\nconst ColorSlider = ({color, updateColorValue}) => {\n\n    const { name, value } = color;\n\n    const colorLetter = name.slice(0, 1).toUpperCase();\n\n    return (\n        <div className=\"color-slider\">\n            <span \n                className=\"color-name\"\n            >{colorLetter}</span>\n            <input \n                type=\"range\" \n                name={color.name} \n                value={color.value} \n                onChange={(e) => updateColorValue(e)}\n                min=\"0\"\n                max=\"255\"\n            />\n            <span\n                className=\"color-value\"\n            >{color.value}</span>\n        </div>\n    )\n};\n\nexport default ColorSlider;","import React from 'react';\nimport './ColorSliders.scss';\nimport ColorSlider from '../ColorSlider/ColorSlider';\n\nconst ColorSliders = ({colors, updateColorValue}) => {\n\n    return (\n        <div className=\"color-sliders\">\n            {\n                colors && colors.map((color, idx) => (\n                    <ColorSlider \n                        key={idx}\n                        color={color} \n                        updateColorValue={updateColorValue} \n                    />\n                ))\n            }\n        </div>\n    )\n};\n    \nexport default ColorSliders;","import React from 'react';\nimport './ColorValueDisplayer.css';\n\nconst ColorValueDisplayer = ({color}) => {\n    return (\n        <span>\n            {color.value}\n            {\n                color.name !== 'blue' &&\n                ', '\n            }\n        </span>\n\n    )\n};\n\nexport default ColorValueDisplayer;","import React from 'react';\n// import './RGBDisplayer.scss';\nimport styled, { css } from 'styled-components';\nimport ColorValueDisplayer from '../ColorValueDisplayer/ColorValueDisplayer';\n\nconst Container = styled.div`\n    // width: 100%;\n    // height: 100%;\n`\n\nconst Box = styled(Container)`\n    background: rgb( ${props => props.redVal}, ${props => props.greenVal}, ${props => props.blueVal});\n    max-width: 300px;\n    max-height: 300px;\n    margin: 0 auto;\n    width: 300px;\n    height: 300px;\n`\n\nconst Text = styled.p`\n    padding: 2rem 0;\n    font-weight: bold;\n`\n\nconst RGBDisplayer = ({ colors }) => {\n\n    const redVal = colors[0].value;\n    const greenVal = colors[1].value;\n    const blueVal = colors[2].value;\n\n    return (\n        <Container className=\"rgbDisplayer-container\">\n            <Text>\n                RGB(\n                        {\n                    colors.map((color, idx) => (\n                        <ColorValueDisplayer\n                            key={idx}\n                            color={color}\n                        />\n                    ))\n\n                }\n                )\n            </Text>\n            <Box \n                redVal={redVal}\n                greenVal={greenVal}\n                blueVal={blueVal}\n            >\n            </Box>\n        </Container>\n    )\n};\n\nexport default RGBDisplayer;","import React, { useState } from 'react';\nimport './ColorBrowser.scss';\nimport ColorSliders from '../ColorSliders/ColorSliders';\nimport RGBDisplayer from '../RGBDisplayer/RGBDisplayer';\n\nconst ColorBrowser = () => {\n\n    const initialColorValues = [\n        {\n            name: 'red',\n            value: 100\n        },\n        {\n            name: 'green',\n            value: 168\n        }, {\n            name: 'blue',\n            value: 80\n        }\n    ];\n\n    const title = 'Color Browser';\n\n    const [colors, setColorValues] = useState(initialColorValues);\n\n    const updateColorValue = (e) => {\n\n        e.persist();\n\n        const colorName = e.target.name;\n        const newValue = parseInt(e.target.value);\n\n        setColorValues(colorValues => {\n            const colors = colorValues.map(color => {\n                if (color.name === colorName) {\n                    return {\n                        ...color,\n                        value: newValue\n                    }\n                }\n                return color;\n            });\n            return colors;\n        });\n\n    }\n\n    return (\n        <div className=\"color-browser-app\">\n            <div className=\"content\">\n                <div>\n                    <h1>{title}</h1>\n                    <ColorSliders \n                        colors={colors} \n                        updateColorValue={updateColorValue} \n                />\n                </div>\n                <RGBDisplayer \n                    colors={colors} \n                />\n            </div>\n        </div>\n    )\n};\n\nexport default ColorBrowser;","import React, { useState } from 'react';\nimport './Timer.scss';\n\nconst Timer = ({ timer, startTimer, pauseTimer, resetTimer, increaseTime, decreaseTime, updateTimerName }) => {\n\n    const { id, name, min, sec, mode, intervalFuncName } = timer;\n\n    const [timerName, setTimerName] = useState({\n        updatedName: name,\n        editNameMode: false\n    });\n\n    const editNameMode = (e) => {\n        e.persist();\n\n        setTimerName({\n            ...timerName,\n            editNameMode: true\n        });\n    };\n\n    const editNameChangeHandler = (e) => {\n\n        e.persist();\n        let updatedName = e.target.value;\n\n        setTimerName({\n            ...timerName,\n            updatedName: updatedName\n        });\n\n    };\n\n    const submitNameChange = (e) => {\n        e.persist();\n\n        let keyCode = e.keyCode;\n\n        if (keyCode === 13) {\n            updateTimerName(id, timerName.updatedName);\n\n            setTimerName({\n                ...timerName,\n                editNameMode: false\n            })\n        }\n\n    }\n\n    return (\n        <div \n            className=\"timer-group\"\n        >\n            <div>\n                {\n                    !timerName.editNameMode &&\n                    <h4\n                        className=\"timer-name\"\n                        onClick={(e) => editNameMode(e)}\n                    >{name}</h4>\n                }\n                {\n                    timerName.editNameMode && \n                    <input \n                        className=\"timer-name-edit\"\n                        value={timerName.updatedName}\n                        onChange={(e) => editNameChangeHandler(e)}\n                        onKeyUp={(e) => submitNameChange(e)}\n                        maxlength=\"17\"\n                    type=\"text\" />\n                }\n                <span\n                    className=\"timer-clock\"\n                >{min}:{sec < 10 ? 0 : ''}{sec}</span>\n            </div>\n            <div \n                className=\"buttons-timer-group\"\n            >\n            {\n                mode === 'paused' && <button\n                    className=\"button-timer-adj start\"\n                    onClick={() => startTimer(timer) }    \n                >Start</button>\n            }\n            {\n                mode === 'started' && <button\n                    className=\"button-timer-adj pause\"\n                    onClick={() => pauseTimer(timer) }    \n                >Pause</button>\n            }\n            <button\n                className=\"button-timer-adj reset\"\n                onClick={() => resetTimer(timer)}\n            >Reset</button>\n            <button\n                className=\"button-timer-adj increase\"\n                onClick={() => increaseTime(id)}\n            >+30s</button>\n            <button\n                className=\"button-timer-adj decrease\"\n                onClick={() => decreaseTime(id)}\n                disabled={mode === 'reset'}\n            >-30s</button>\n            </div>\n        </div>\n    )\n\n};\n\nexport default Timer;","import React from 'react';\nimport Timer from '../Timer/Timer';\n\nconst Timers = ({ timers = [], startTimer, pauseTimer, resetTimer, increaseTime, decreaseTime, updateTimerName }) => {\n\n    return (\n        <div>\n            {\n                timers.length > 0 && timers.map((timer, idx) => (\n                    <Timer \n                        key={idx}\n                        timer={timer}\n                        startTimer={startTimer}\n                        pauseTimer={pauseTimer}\n                        resetTimer={resetTimer}\n                        increaseTime={increaseTime}\n                        decreaseTime={decreaseTime}\n                        updateTimerName={updateTimerName}\n                    />\n                ))\n            }\n        </div>\n    )\n};\n\nexport default Timers;","import React, { useState } from 'react';\nimport Timers from '../Timers/Timers.js';\nimport uuid from 'uuid';\nimport './CookingTimers.scss';\n\nconst CookingTimersPage = () => {\n\n    const title = 'Cooking Timers';\n\n    // modes: started, paused, reset\n    const initialState = [\n        {\n            id: uuid(),\n            name: 'eggs',\n            min: 5,\n            sec: 30,\n            originalMin: 5,\n            originalSec: 30,\n            mode: 'paused',\n            intervalFuncName: ''\n        },\n        {\n            id: uuid(),\n            name: 'grits',\n            min: 3,\n            sec: 0,\n            originalMin: 3,\n            originalSec: 0,\n            mode: 'paused',\n            intervalFuncName: ''\n        },\n        {\n            id: uuid(),\n            name: 'bacon',\n            min: 2,\n            sec: 15,\n            originalMin: 2,\n            originalSec: 15,\n            mode: 'paused',\n            intervalFuncName: ''\n        }\n    ];\n\n    const [timers, setTimers] = useState(initialState);\n\n    const startTimer = ({ id, name, min, sec, mode }) => {\n\n        if (name) {\n\n            let setIntervalId = setInterval(() => {\n                setTimers(cookingTimers => {\n                    \n                    const timers = cookingTimers.map(timer => {\n                        if (timer.id === id) {\n                            const { sec, min } = timer;\n                            if (min === 0 && sec === 0) {\n                                clearTimer(timer.intervalFuncName);\n                                return {\n                                    ...timer,\n                                    mode: 'reset',\n                                    intervalFuncName: ''\n                                };\n                            }\n                            return {\n                                ...timer,\n                                min: sec === 0 && min >= 1 ? min - 1 : min,\n                                sec: sec === 0 && min === 0 ? 0 : sec === 0 ? 59 : sec - 1,\n                                mode: 'started',\n                                intervalFuncName: setIntervalId\n                            }\n                        }\n                        return timer;\n                    })\n                    return timers;\n                });\n\n            }, 1000);\n\n        }\n\n    }\n\n    const updateTimerName = (id, name) => {\n        setTimers(cookingTimers => {\n            const timers = cookingTimers.map(timer => {\n                if (timer.id === id) {\n                    return {\n                        ...timer,\n                        name\n                    }\n                }\n                return timer;\n            });\n            return timers;\n        });\n    };\n\n    const addTimer = () => {\n\n        setTimers(cookingTimers => {\n            const timers = [\n                ...cookingTimers,\n                {\n                    id: uuid(),\n                    name: 'Edit Name',\n                    min: 5,\n                    sec: 0,\n                    originalMin: 5,\n                    originalSec: 0,\n                    mode: 'paused',\n                    intervalFuncName: ''\n                }\n            ]\n\n            return timers;\n        });\n    }\n\n    const clearTimer = (intervalFuncName) => {\n        clearInterval(intervalFuncName);\n    };\n\n    const resetTimer = ({id, intervalFuncName}) => {\n        clearInterval(intervalFuncName);\n\n        setTimers(cookingTimers => {\n            const timers = cookingTimers.map(timer => {\n                if (timer.id === id) {\n                    return {\n                        ...timer,\n                        min: timer.originalMin,\n                        sec: timer.originalSec,\n                        mode: 'paused',\n                        intervalFuncName: ''\n                    }\n                }\n                return timer;\n            })\n            return timers;\n        });\n\n\n    };\n\n    const pauseTimer = ({id, intervalFuncName}) => {\n        clearInterval(intervalFuncName);\n\n        setTimers(cookingTimers => {\n            const timers = cookingTimers.map(timer => {\n                if (timer.id === id) {\n                    return {\n                        ...timer,\n                        mode: 'paused'\n                    }\n                }\n                return timer;\n            })\n            return timers;\n        });\n\n    };\n\n    const increaseTime = (timerId) => {\n        setTimers(cookingTimers => {\n            const timers = cookingTimers.map(timer => {\n                const { id, min, sec } = timer;\n                if (id === timerId) {\n                    return {\n                        ...timer,\n                        min: sec >= 30 ? min + 1 : min,\n                        sec: sec + 30 > 59 ? sec - 30 : sec + 30\n                    }\n                }\n                return timer;\n            })\n            return timers;\n        });\n    };\n\n    const decreaseTime = (timerId) => {\n        setTimers(cookingTimers => {\n            const timers = cookingTimers.map(timer => {\n                const { id, min, sec } = timer;\n                if (id === timerId) {\n                    return {\n                        ...timer,\n                        min: min === 0 ? 0 : sec <= 29 ? min - 1: min,\n                        sec: min === 0 && sec <= 29 ? 0 : sec - 30 < 0 ? 60 - (30 - sec) : sec - 30\n                    }\n                }\n                return timer;\n            })\n            return timers;\n        });\n    }\n\n    return (\n        <div className=\"cooking-timers-app\">\n            <div className=\"content\">\n                <h1>{title}</h1>\n                <button\n                    onClick={() => addTimer()}\n                >\n                    <span>+</span>\n                </button>\n                <Timers\n                timers={timers}\n                startTimer={startTimer}\n                pauseTimer={pauseTimer}\n                resetTimer={resetTimer}\n                increaseTime={increaseTime}\n                decreaseTime={decreaseTime}\n                updateTimerName={updateTimerName}\n            />\n            </div>\n        </div>\n    )\n};\n\nexport default CookingTimersPage;","import React, { useState } from 'react';\nimport './Todo.scss';\n\nconst Todo = ({todo, updateTodo, deleteTodo}) => {\n\n    const [updatedTodo, setUpdatedTodo] = useState(todo);\n\n    const setEditModeHandler = () => {\n        setUpdatedTodo({\n            ...updatedTodo,\n            isEditMode: true\n        });\n    }\n\n    const onTodoChangeHandler = (e) => {\n        e.persist();\n\n        const editedTodo = e.target.value;\n\n        setUpdatedTodo({\n            ...updatedTodo,\n            editedName: editedTodo\n        });\n    }\n\n    const saveUpdatedTodo = (e) => {\n\n        e.persist();\n\n        updateTodo(updatedTodo);\n\n        setUpdatedTodo({\n            ...updatedTodo,\n            name: updatedTodo.editedName,\n            editedName: updatedTodo.editedName,\n            isEditMode: false\n        });\n\n    };\n\n    const cancelEditMode = (e) => {\n        setUpdatedTodo({\n            ...updatedTodo,\n            editedName: updatedTodo.name, \n            isEditMode: false\n        });\n    };\n\n    return (\n        <li className=\"todoItem\">\n            {\n                \n                !updatedTodo.isEditMode && \n                <p\n                    onClick={() => setEditModeHandler()}\n                >{updatedTodo.name}</p>\n            }\n            {\n                updatedTodo.isEditMode && \n                    <input \n                        value={updatedTodo.editedName}\n                        type=\"text\"\n                        onChange={(e) => onTodoChangeHandler(e)}\n                    />\n            }\n            \n            <div className=\"button-wrapper\">\n                {\n                    updatedTodo.isEditMode &&\n                    <button\n                        className=\"save todo-button\"\n                        onClick={(e) => saveUpdatedTodo(e)}\n                        disabled={updatedTodo.editedName.length < 3}\n                    >Save</button>\n                }\n                {\n                    updatedTodo.isEditMode && <button\n                        className=\"cancel todo-button\"\n                        onClick={(e) => cancelEditMode(e)}\n                    >Cancel</button>\n                }\n                <button\n                    className=\"delete todo-button\"\n                    onClick={(e) => deleteTodo(updatedTodo.id)}\n                >Delete</button>\n            </div>\n        </li>\n    );\n};\n\nexport default Todo;","import React from 'react';\nimport './Todos.scss';\nimport Todo from '../Todo/Todo';\n\nconst Todos = ({ todos, updateTodo, deleteTodo }) => {\n    return (\n        <ul>\n        {\n            todos && todos.map(todo => (\n                <Todo\n                    key={todo.id}\n                    todo={todo}\n                    updateTodo={updateTodo}\n                    deleteTodo={deleteTodo}\n                />\n            ))\n        }\n    </ul>\n    );\n};\n\nexport default Todos;","import React from 'react';\nimport './AddFunctionality.scss';\n\nconst AddFunctionality = ({toBeCreatedTodo, addTodo, toBeCreatedTodoChangesHandler}) => {\n    return (\n        <div className=\"add-functionality\">\n            <input\n                onChange={(e) => toBeCreatedTodoChangesHandler(e)}\n                type=\"text\"\n                value={toBeCreatedTodo}\n                minLength=\"3\"\n                maxLength=\"30\"\n            />\n            <button\n                onClick={(e) => addTodo(e)}\n                disabled={toBeCreatedTodo.length < 3}\n            >Add</button>\n        </div>\n    );\n};\n\nexport default AddFunctionality;","import React, { useState, useEffect } from 'react';\nimport uuid from 'uuid';\nimport './ToDoList.scss';\nimport Todos from '../Todos/Todos';\nimport AddFunctionality from '../AddFunctionality/AddFunctionality';\n\nconst ToDoList = () => {\n\n    const title = 'To Do App';\n\n    const initialTodoState = [\n        {\n            id: uuid(),\n            name: 'walk the dog',\n            editMode: false,\n            editedName: 'walk the dog'\n        }\n    ];\n\n    const [toBeCreatedTodo, setToBeCreatedTodo ] = useState(\"\");\n\n    const [todos, setTodos] = useState(initialTodoState);\n\n    const toBeCreatedTodoChangesHandler = (e) => {\n        e.persist();\n\n        const currentNewTodo = e.target.value;\n\n        setToBeCreatedTodo(currentNewTodo);\n    }\n\n    const addTodo = (e) => {\n\n        e.persist();\n\n        setTodos(currentTodos => {\n            const todos = [\n                ...currentTodos, {\n                    id: uuid(),\n                    name: toBeCreatedTodo,\n                    editMode: false,\n                    editedName: toBeCreatedTodo\n                }\n            ];\n            return todos;\n        });\n        \n        // clear field\n        setToBeCreatedTodo('');\n\n    };\n\n    const updateTodo = (updatedTodo) => {\n\n        setTodos(todos => {\n            const updatedTodos = todos.map(todo => {\n                if (todo.id === updatedTodo.id) {\n                    return {\n                        ...todo,\n                        updatedTodo\n                    }\n                } else {\n                    return todo;\n                }\n            });\n            return updatedTodos;\n        });\n    };\n\n    const deleteTodo = (id) => {\n\n        setTodos(todos => {\n            const updatedTodos = todos.filter(todo => {\n                if (todo.id !== id) {\n                    return todo;\n                };\n            });\n            return updatedTodos;\n        });\n    };\n\n    return (\n        <section className=\"to-do-list-app\">\n            <div className=\"content\">\n            <h1>{title}</h1>\n            <AddFunctionality \n                toBeCreatedTodo={toBeCreatedTodo}\n                addTodo={addTodo}\n                toBeCreatedTodoChangesHandler={toBeCreatedTodoChangesHandler}\n            />\n            <Todos \n                todos={todos}\n                updateTodo={updateTodo}    \n                deleteTodo={deleteTodo}\n            />        \n            </div>    \n        </section>\n    )\n};\n\nexport default ToDoList;","import React from 'react';\nimport './NotFound.scss';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n\n    const title = '404';\n\n    const subTitle = 'File Not Found. Try going ';\n\n    return (\n        <section className=\"not-found\">\n            <div className=\"content\">\n                <h1>{title}</h1>\n                <p>{subTitle} <Link to=\"/\">Home</Link></p>\n            </div>\n        </section>\n    )\n};\n\nexport default NotFound;","import React, { useState } from 'react';\nimport LeftSideNav from './components/LeftSideNav/LeftSideNav';\nimport Home from './components/Home/Home';\nimport ColorBrowser from './components/ColorBrowserApp/ColorBrowser/ColorBrowser';\nimport CookingTimers from './components/CookingTimersApp/CookingTimers/CookingTimers';\nimport ToDoList from './components/ToDoApp/ToDoList/ToDoList';\nimport NotFound from './components/NotFound/NotFound';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.scss';\nimport styled, { css } from 'styled-components';\n\nconst MenuToggler = styled.span`\n  color: ${props => props.toggleMenu ? '#fff' : '#000'}\n`\n\nconst App = () => {\n\n  const [toggleMenu, setToggleMenu] = useState(false);\n\n  const togglingMenu = () => {\n    setToggleMenu(!toggleMenu);\n  }\n\n  return ( \n    <Router>\n      <section className=\"App container\">\n        <div className=\"content\">\n          <LeftSideNav\n            className=\"sidebar\"\n            toggleMenu={toggleMenu}\n          />\n          <header>\n            <MenuToggler\n              className=\"toggle-menu-button\"\n              toggleMenu={toggleMenu}\n              onClick={() => togglingMenu()}\n            >=</MenuToggler>\n          </header>\n          <main className=\"main-view\">\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/color-browser\" component={ColorBrowser} />\n            <Route path=\"/cooking-timers\" component={CookingTimers} />\n            <Route path=\"/to-do-list\" component={ToDoList} />\n            <Route component={NotFound} />\n          </main>\n        </div>\n      </section>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App basename={process.env.PUBLIC_URL} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}